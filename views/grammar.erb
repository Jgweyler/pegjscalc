<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li> $\Sigma = \{ call, begin, end, procedure, const, var, if, then, else, while, do, odd, <, <=, >, >=, ==, !=, =, +, -, *, /, (, ), 0 \ldots 9 \}$, 
  <li> $V = \{ prog, block, cons, var, proc, args, st, exp, term, factor \} \cup$ <br />
  $\{ASSIGN, ADD, MUL, LEFTPAR, RIGHTPAR, PYC, COMA, DOT \} \cup$ <br />
  $\{CALL, BEGIN, END, PROCEDURE, CONST, VAR, IF, THEN, ELSE, ID, NUMBER, \_ \}$
  <li> Reglas de Análisis:
  <ol>
<pre>
prog   = block DOT

block  = VAR var proc st
       / CONST cons VAR var proc st
       / CONST cons proc st
       / proc st

cons   = ID ASSIGN NUMBER (COMA ID ASSIGN NUMBER)* PYC

var    = ID (COMA ID)* PYC

proc   = (PROCEDURE ID args? PYC block PYC)*

args   = LEFTPAR ID (COMA ID)* RIGHTPAR

st     = ID ASSIGN exp
       / CALL ID args?
       / BEGIN st (PYC st)* END
       / IF cond THEN st ELSE st
       / IF cond THEN st
       / WHILE cond DO st
       
cond   = ODD exp
       / exp COND exp

exp    = term   (ADD term)*
term   = factor (MUL factor)*

factor = NUMBER
       / ID
       / LEFTPAR exp RIGHTPAR

_ = $[ \t\n\r]*

ASSIGN   = _ '=' _
ADD      = _ [+-] _
MUL      = _ [*/] _
LEFTPAR  = _"("_
RIGHTPAR = _")"_
PYC      = _";"_
COMA     = _","_
DOT      = _"."_
CALL     = _"call"_
BEGIN    = _"begin"_
END      = _"end"_
PROCEDURE= _"procedure"_
CONST    = _"const"_
VAR      = _"var"_
IF       = _ "if" _
THEN     = _ "then" _
ELSE     = _ "else" _
WHILE    = _"while"_
DO       = _"do"_
ODD      = _"odd"_
ID       = _ [a-zA-Z_][a-zA-Z_0-9]* _
NUMBER   = _ [0-9]+ _
</pre>
  </ol>
  <li> Expresión de arranque: $st$
</ol>
<BR>
<BR>
<BR>

